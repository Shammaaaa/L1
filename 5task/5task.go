package main

import (
	"fmt"
	"time"
)

func main() {
	dataChan := make(chan int)
	done := make(chan bool)

	// Функция для отправки значений в канал
	go func() {
		for i := 1; i <= 10; i++ {
			dataChan <- i
			time.Sleep(time.Second) // Задержка между отправками значений
		}
		close(dataChan) // Закрытие канала после отправки всех значений
	}()

	// Функция для чтения значений из канала
	go func() {
		for {
			value, ok := <-dataChan
			if !ok {
				// Канал закрыт, завершаем работу
				done <- true
				return
			}
			fmt.Printf("Получение: %d\n", value)
		}
	}()

	// Ожидание заданного времени
	select {
	case <-done:
		fmt.Println("Завершение программы")
	case <-time.After(5 * time.Second):
		fmt.Println("Истекло время ожидания")
	}
}

/*
Создается канал dataChan для передачи значения типа int. Затем две горутины запускаются одновременно.
Первая горутина отправляет значения от 1 до 10 в канал с интервалом в одну секунду. После отправки всех значений канал закрывается с помощью функции close.
Вторая горутина читает значения из канала и выводит их на экран, пока канал не будет закрыт.
Главная горутина ждет указанное время с помощью функции time.Sleep, а затем завершает программу, отправив значение true в канал done.
*/
