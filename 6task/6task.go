package main

import "sync"

/*
Один из способов остановить горутину - это использовать канал для коммуникации с горутиной.
Вы можете создать канал типа bool и передавать значение true в него из другой горутины,
чтобы сигнализировать горутине о необходимости остановиться.
*/
quit := make(chan bool)

go func() {
	// Код
	select {
	case <-quit:
		// Горутина должна остановиться
		return
	default:
		// Продолжение выполнения горутины
	}

	// Код
}()

// Отправка сигнала остановки горутины
quit <- true





/*
Другой способ остановить выполнение горутины - это с использованием sync.WaitGroup,
который позволяет ждать завершения всех горутин.
 */
var wg sync.WaitGroup
quit := make(chan bool)

wg.Add(1)
go func() {
	defer wg.Done()

	// Код

	// Проверка канала на прием сигнала остановки
	select {
	case <-quit:
		// Горутина должна остановиться
		return
	default:
		// Продолжение выполнения горутины
	}

	// Код
}()

// Отправка сигнала остановки горутины
quit <- true

// Ожидание завершения всех горутин
wg.Wait()



/*
Ещё способ остановить выполнение горутины - это использование механизма отмены через контекст.
Можно создать контекст с помощью context.WithCancel и вызвать cancel() для отправки сигнала остановки горутине.
 */
ctx, cancel := context.WithCancel(context.Background())

go func() {
	// Код

	// Проверка контекста на отмену
	select {
	case <-ctx.Done():
		// Горутина должна остановиться
		return
	default:
		// Продолжение выполнения горутины
	}

	// Код
}()

// Отправка сигнала остановки горутины
cancel()




/*
Можно использовать пакет os для отправки сигнала прерывания (например, os.Interrupt при нажатии Ctrl+C) и отслеживания этого сигнала в горутине.
 */
quit := make(chan os.Signal, 1)
signal.Notify(quit, os.Interrupt)

go func() {
	// Код

	for {
		select {
		case <-quit:
			// Горутина должна остановиться
			return
		default:
			// Продолжение выполнения горутины
		}

		// Код
	}
}()